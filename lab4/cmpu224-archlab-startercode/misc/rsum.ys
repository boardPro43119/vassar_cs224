# rsum.ys
# Benjamin Prud'homme

# Start of execution 
.pos 0
irmovq Stack, %rsp		# Initialize stack pointer
irmovq ele1, %rdi		# Initialize first list node
call rsum_list
halt

# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

# long sum_list(list_ptr ls)
rsum_list:	
	xorq %rax, %rax		# return value = 0
	rrmovq %rdi, %r8
	andq %r8, %r8
	je done			# If %rdx is 0 (end of the list), end
	pushq %rbx		# Save callee-saved register
	mrmovq (%rdi), %rbx	# Get ls->val
	mrmovq 8(%rdi), %rdi	# ls = ls->next
	call rsum_list		# Recursive call
	addq %rbx, %rax		# val += ls->val
	popq %rbx		# Restore callee-saved register
done:
	ret

.pos 0x100
Stack:
	
	
