                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6d804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804003000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Benjamin Prud'homme
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Replaced irmovq/addq with iaddq
                            | # Unrolled loop to copy 8 elements at a time
                            | # Implemented jump table to deal with remainder
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 2021                 | 	rrmovq %rdx, %rcx
0x03f: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# len <= 8?
0x049: 71cb01000000000000   | 	jle Remjmp		# if so, goto Remjmp
                            | 
0x052: 50870000000000000000 | Copy1:	mrmovq (%rdi), %r8
0x05c: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x066: 6288                 | 	andq %r8, %r8
0x068: 717b00000000000000   | 	jle Copy2
0x071: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x07b: 50970800000000000000 | Copy2:	mrmovq 8(%rdi), %r9
0x085: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x08f: 6299                 | 	andq %r9, %r9
0x091: 71a400000000000000   | 	jle Copy3
0x09a: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
0x0a4: 50a71000000000000000 | Copy3:	mrmovq 16(%rdi), %r10
0x0ae: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b8: 62aa                 | 	andq %r10, %r10
0x0ba: 71cd00000000000000   | 	jle Copy4
0x0c3: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0cd: 50b71800000000000000 | Copy4:	mrmovq 24(%rdi), %r11
0x0d7: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0e1: 62bb                 | 	andq %r11, %r11
0x0e3: 71f600000000000000   | 	jle Copy5
0x0ec: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0f6: 50c72000000000000000 | Copy5:	mrmovq 32(%rdi), %r12
0x100: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x10a: 62cc                 | 	andq %r12, %r12
0x10c: 711f01000000000000   | 	jle Copy6
0x115: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x11f: 50d72800000000000000 | Copy6:	mrmovq 40(%rdi), %r13
0x129: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x133: 62dd                 | 	andq %r13, %r13
0x135: 714801000000000000   | 	jle Copy7
0x13e: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x148: 50e73000000000000000 | Copy7:	mrmovq 48(%rdi), %r14
0x152: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x15c: 62ee                 | 	andq %r14, %r14
0x15e: 717101000000000000   | 	jle Copy8
0x167: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x171: 50373800000000000000 | Copy8:	mrmovq 56(%rdi), %rbx
0x17b: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x185: 6233                 | 	andq %rbx, %rbx
0x187: 719a01000000000000   | 	jle Npos
0x190: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x19a: c0f74000000000000000 | Npos:	iaddq $64, %rdi		# src++
0x1a4: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1ae: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x1b8: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# (len-8)--
0x1c2: 767101000000000000   | 	jg Copy8		# if len > 8, goto Copy8 (continue loop):
                            | 
0x1cb: 6022                 | Remjmp:	addq %rdx, %rdx
0x1cd: 6022                 | 	addq %rdx, %rdx
0x1cf: 6022                 | 	addq %rdx, %rdx		# %rdx = 8 * %rdx
0x1d1: 703803000000000000   | 	jmp JTend(%rdx), %rdx # instruction to jump to 
                            | 
0x1da: 50e73000000000000000 | Rem7:	mrmovq 48(%rdi), %r14
0x1e4: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x1ee: 62ee                 | 	andq %r14, %r14
0x1f0: 710302000000000000   | 	jle Rem6
0x1f9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x203: 50d72800000000000000 | Rem6:	mrmovq 40(%rdi), %r13
0x20d: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x217: 62dd                 | 	andq %r13, %r13
0x219: 712c02000000000000   | 	jle Rem5
0x222: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x22c: 50c72000000000000000 | Rem5:	mrmovq 32(%rdi), %r12
0x236: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x240: 62cc                 | 	andq %r12, %r12
0x242: 715502000000000000   | 	jle Rem4
0x24b: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x255: 50b71800000000000000 | Rem4:	mrmovq 24(%rdi), %r11
0x25f: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x269: 62bb                 | 	andq %r11, %r11
0x26b: 717e02000000000000   | 	jle Rem3
0x274: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x27e: 50a71000000000000000 | Rem3:	mrmovq 16(%rdi), %r10
0x288: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x292: 62aa                 | 	andq %r10, %r10
0x294: 71a702000000000000   | 	jle Rem2
0x29d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2a7: 50970800000000000000 | Rem2:	mrmovq 8(%rdi), %r9
0x2b1: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2bb: 6299                 | 	andq %r9, %r9
0x2bd: 71d002000000000000   | 	jle Rem1
0x2c6: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2d0: 50870000000000000000 | Rem1:	mrmovq (%rdi), %r8
0x2da: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2e4: 6288                 | 	andq %r8, %r8
0x2e6: 71f902000000000000   | 	jle Done
0x2ef: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2f9:                      | Done:
0x2f9: 90                   | 	ret
                            | ##################################################################
                            | 
0x300:                      | .align 8
                            | 
0x300: f902000000000000     | JT:	.quad Done
0x308: d002000000000000     | 	.quad Rem1
0x310: a702000000000000     | 	.quad Rem2
0x318: 7e02000000000000     | 	.quad Rem3
0x320: 5502000000000000     | 	.quad Rem4
0x328: 2c02000000000000     | 	.quad Rem5
0x330: 0302000000000000     | 	.quad Rem6
0x338: da01000000000000     | JTend:	.quad Rem7
                            | 
                            | # Keep the following label at the end of your function
0x340:                      | End:
                            | #/* $end ncopy-ys */
0x340:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x340:                      | check:
                            | 	# Return value test
0x340: 30fa0000000000000000 | 	irmovq $0,%r10
0x34a: 61a0                 | 	subq %r10,%rax
0x34c: 736803000000000000   | 	je checkb
0x355: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x35f: 70a604000000000000   | 	jmp cdone
0x368:                      | checkb:
                            | 	# Code length check
0x368: 30f04003000000000000 | 	irmovq EndFun,%rax
0x372: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x37c: 6120                 | 	subq %rdx,%rax
0x37e: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x388: 6102                 | 	subq %rax,%rdx
0x38a: 75a603000000000000   | 	jge checkm
0x393: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x39d: 70a604000000000000   | 	jmp cdone
0x3a6:                      | checkm:
0x3a6: 30f2d804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3b0: 30f3a804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3ba: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x3c4: 6277                 | 	andq %rdi,%rdi
0x3c6: 732404000000000000   | 	je checkpre         # Skip check if count = 0
0x3cf:                      | mcloop:
0x3cf: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x3d9: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x3e3: 6160                 | 	subq %rsi,%rax
0x3e5: 730104000000000000   | 	je  mok
0x3ee: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x3f8: 70a604000000000000   | 	jmp cdone
0x401:                      | mok:
0x401: 30f00800000000000000 | 	irmovq $8,%rax
0x40b: 6002                 | 	addq %rax,%rdx	  # dest ++
0x40d: 6003                 | 	addq %rax,%rbx    # src++
0x40f: 30f00100000000000000 | 	irmovq $1,%rax
0x419: 6107                 | 	subq %rax,%rdi    # cnt--
0x41b: 76cf03000000000000   | 	jg mcloop
0x424:                      | checkpre:
                            | 	# Check for corruption
0x424: 30f2d004000000000000 | 	irmovq Predest,%rdx
0x42e: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x438: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x442: 6120                 | 	subq %rdx,%rax
0x444: 736004000000000000   | 	je checkpost
0x44d: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x457: 70a604000000000000   | 	jmp cdone
0x460:                      | checkpost:
                            | 	# Check for corruption
0x460: 30f2f804000000000000 | 	irmovq Postdest,%rdx
0x46a: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x474: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x47e: 6120                 | 	subq %rdx,%rax
0x480: 739c04000000000000   | 	je checkok
0x489: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x493: 70a604000000000000   | 	jmp cdone
0x49c:                      | checkok:
                            | 	# Successful checks
0x49c: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4a6:                      | cdone:
0x4a6: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4a8:                      | 	.align 8
0x4a8:                      | src:
0x4a8: ffffffffffffffff     | 	.quad -1
0x4b0: feffffffffffffff     | 	.quad -2
0x4b8: fdffffffffffffff     | 	.quad -3
0x4c0: fcffffffffffffff     | 	.quad -4
0x4c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4d0:                      | 	.align 16
0x4d0:                      | Predest:
0x4d0: fadebc0000000000     | 	.quad 0xbcdefa
0x4d8:                      | dest:
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8:                      | Postdest:
0x4f8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x500:                      | .align 8
                            | # Run time stack
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
                            | 
0x580:                      | Stack:
