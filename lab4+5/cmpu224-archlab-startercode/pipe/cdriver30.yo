                            | #######################################################################
                            | # Test for copying block of size 30;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46007000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f21e00000000000000 | 	irmovq $30, %rdx		# src and dst have 30 elements
0x014: 30f6e805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 807e03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Benjamin Prud'homme
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Replaced irmovq/addq with iaddq
                            | # Unrolled loop to copy 8 elements at a time
                            | # Implemented jump table to deal with remainder
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 2021                 | 	rrmovq %rdx, %rcx
0x03f: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# len < 8?
0x049: 72cb01000000000000   | 	jl Rem1			# if so, goto Rem1
                            | 
0x052: 50870000000000000000 | Copy:	mrmovq (%rdi), %r8
0x05c: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x066: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x070: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x07a: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x084: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x08e: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x098: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
                            | 
0x0a2: 6288                 | Copy1:	andq %r8, %r8
0x0a4: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0ae: 71c100000000000000   | 	jle Copy2
0x0b7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0c1: 6299                 | Copy2:	andq %r9, %r9
0x0c3: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0cd: 71e000000000000000   | 	jle Copy3
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
0x0e0: 62aa                 | Copy3:	andq %r10, %r10
0x0e2: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0ec: 71ff00000000000000   | 	jle Copy4
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff: 62bb                 | Copy4:	andq %r11, %r11
0x101: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x10b: 711e01000000000000   | 	jle Copy5
0x114: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x11e: 62cc                 | Copy5:	andq %r12, %r12
0x120: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x12a: 713d01000000000000   | 	jle Copy6
0x133: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x13d: 62dd                 | Copy6:	andq %r13, %r13
0x13f: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x149: 715c01000000000000   | 	jle Copy7
0x152: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x15c: 62ee                 | Copy7:	andq %r14, %r14
0x15e: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x168: 717b01000000000000   | 	jle Copy8
0x171: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x17b: 6233                 | Copy8:	andq %rbx, %rbx
0x17d: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x187: 719a01000000000000   | 	jle Npos
0x190: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x19a: c0f74000000000000000 | Npos:	iaddq $64, %rdi		# 0x191 src++
0x1a4: c0f64000000000000000 | 	iaddq $64, %rsi		# 0x19b dst++
0x1ae: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# 0x1a5 len--
0x1b8: c0f1f8ffffffffffffff | 	iaddq $-8, %rcx		# 0x1af (len-8)--
0x1c2: 755200000000000000   | 	jge Copy		# 0x1b9 if len >= 8, goto Copy8 (continue loop):
                            | 
0x1cb: 6222                 | Rem1:	andq %rdx, %rdx		# 0x1c2
0x1cd: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x1d7: 717d03000000000000   | 	jle Done
0x1e0: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1ea: 6288                 | 	andq %r8, %r8	
0x1ec: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x1f6: 710902000000000000   | 	jle Rem2
0x1ff: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x209: 6222                 | Rem2:	andq %rdx, %rdx		# 0x1c2
0x20b: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x215: 717d03000000000000   | 	jle Done
0x21e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x228: 6299                 | 	andq %r9, %r9	
0x22a: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x234: 714702000000000000   | 	jle Rem3
0x23d: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
0x247: 6222                 | Rem3:	andq %rdx, %rdx		# 0x1c2
0x249: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x253: 717d03000000000000   | 	jle Done
0x25c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x266: 62aa                 | 	andq %r10, %r10
0x268: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x272: 718502000000000000   | 	jle Rem4
0x27b: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x285: 6222                 | Rem4:	andq %rdx, %rdx		# 0x1c2
0x287: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x291: 717d03000000000000   | 	jle Done
0x29a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2a4: 62bb                 | 	andq %r11, %r11
0x2a6: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x2b0: 71c302000000000000   | 	jle Rem5
0x2b9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2c3: 6222                 | Rem5:	andq %rdx, %rdx		# 0x1c2
0x2c5: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x2cf: 717d03000000000000   | 	jle Done
0x2d8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2e2: 62cc                 | 	andq %r12, %r12
0x2e4: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x2ee: 710103000000000000   | 	jle Rem6
0x2f7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x301: 6222                 | Rem6:	andq %rdx, %rdx		# 0x1c2
0x303: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x30d: 717d03000000000000   | 	jle Done
0x316: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x320: 62dd                 | 	andq %r13, %r13
0x322: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x32c: 713f03000000000000   | 	jle Rem7
0x335: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x33f: 6222                 | Rem7:	andq %rdx, %rdx		# 0x1c2
0x341: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x34b: 717d03000000000000   | 	jle Done
0x354: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x35e: 62ee                 | 	andq %r14, %r14
0x360: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x36a: 717d03000000000000   | 	jle Done
0x373: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x37d:                      | Done:
0x37d: 90                   | 	ret			# 0x366
                            | ##################################################################
                            | 
                            | # Keep the following label at the end of your function
0x37e:                      | End:
                            | #/* $end ncopy-ys */
0x37e:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 17.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x37e:                      | check:
                            | 	# Return value test
0x37e: 30fa1100000000000000 | 	irmovq $17,%r10
0x388: 61a0                 | 	subq %r10,%rax
0x38a: 73a603000000000000   | 	je checkb
0x393: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x39d: 70e404000000000000   | 	jmp cdone
0x3a6:                      | checkb:
                            | 	# Code length check
0x3a6: 30f07e03000000000000 | 	irmovq EndFun,%rax
0x3b0: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3ba: 6120                 | 	subq %rdx,%rax
0x3bc: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3c6: 6102                 | 	subq %rax,%rdx
0x3c8: 75e403000000000000   | 	jge checkm
0x3d1: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3db: 70e404000000000000   | 	jmp cdone
0x3e4:                      | checkm:
0x3e4: 30f2e805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3ee: 30f3e804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3f8: 30f71e00000000000000 | 	irmovq $30,%rdi  # Count
0x402: 6277                 | 	andq %rdi,%rdi
0x404: 736204000000000000   | 	je checkpre         # Skip check if count = 0
0x40d:                      | mcloop:
0x40d: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x417: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x421: 6160                 | 	subq %rsi,%rax
0x423: 733f04000000000000   | 	je  mok
0x42c: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x436: 70e404000000000000   | 	jmp cdone
0x43f:                      | mok:
0x43f: 30f00800000000000000 | 	irmovq $8,%rax
0x449: 6002                 | 	addq %rax,%rdx	  # dest ++
0x44b: 6003                 | 	addq %rax,%rbx    # src++
0x44d: 30f00100000000000000 | 	irmovq $1,%rax
0x457: 6107                 | 	subq %rax,%rdi    # cnt--
0x459: 760d04000000000000   | 	jg mcloop
0x462:                      | checkpre:
                            | 	# Check for corruption
0x462: 30f2e005000000000000 | 	irmovq Predest,%rdx
0x46c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x476: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x480: 6120                 | 	subq %rdx,%rax
0x482: 739e04000000000000   | 	je checkpost
0x48b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x495: 70e404000000000000   | 	jmp cdone
0x49e:                      | checkpost:
                            | 	# Check for corruption
0x49e: 30f2d806000000000000 | 	irmovq Postdest,%rdx
0x4a8: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4b2: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4bc: 6120                 | 	subq %rdx,%rax
0x4be: 73da04000000000000   | 	je checkok
0x4c7: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4d1: 70e404000000000000   | 	jmp cdone
0x4da:                      | checkok:
                            | 	# Successful checks
0x4da: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4e4:                      | cdone:
0x4e4: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4e8:                      | 	.align 8
0x4e8:                      | src:
0x4e8: 0100000000000000     | 	.quad 1
0x4f0: feffffffffffffff     | 	.quad -2
0x4f8: 0300000000000000     | 	.quad 3
0x500: 0400000000000000     | 	.quad 4
0x508: 0500000000000000     | 	.quad 5
0x510: faffffffffffffff     | 	.quad -6
0x518: f9ffffffffffffff     | 	.quad -7
0x520: 0800000000000000     | 	.quad 8
0x528: 0900000000000000     | 	.quad 9
0x530: f6ffffffffffffff     | 	.quad -10
0x538: f5ffffffffffffff     | 	.quad -11
0x540: 0c00000000000000     | 	.quad 12
0x548: f3ffffffffffffff     | 	.quad -13
0x550: 0e00000000000000     | 	.quad 14
0x558: 0f00000000000000     | 	.quad 15
0x560: 1000000000000000     | 	.quad 16
0x568: efffffffffffffff     | 	.quad -17
0x570: eeffffffffffffff     | 	.quad -18
0x578: 1300000000000000     | 	.quad 19
0x580: 1400000000000000     | 	.quad 20
0x588: ebffffffffffffff     | 	.quad -21
0x590: 1600000000000000     | 	.quad 22
0x598: 1700000000000000     | 	.quad 23
0x5a0: 1800000000000000     | 	.quad 24
0x5a8: e7ffffffffffffff     | 	.quad -25
0x5b0: 1a00000000000000     | 	.quad 26
0x5b8: 1b00000000000000     | 	.quad 27
0x5c0: e4ffffffffffffff     | 	.quad -28
0x5c8: e3ffffffffffffff     | 	.quad -29
0x5d0: e2ffffffffffffff     | 	.quad -30
0x5d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5e0:                      | 	.align 16
0x5e0:                      | Predest:
0x5e0: fadebc0000000000     | 	.quad 0xbcdefa
0x5e8:                      | dest:
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8:                      | Postdest:
0x6d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6e0:                      | .align 8
                            | # Run time stack
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
0x740: 0000000000000000     | 	.quad 0
0x748: 0000000000000000     | 	.quad 0
0x750: 0000000000000000     | 	.quad 0
0x758: 0000000000000000     | 	.quad 0
                            | 
0x760:                      | Stack:
