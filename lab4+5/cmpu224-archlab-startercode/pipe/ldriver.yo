                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Benjamin Prud'homme
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Replaced irmovq/addq with iaddq
                            | # Unrolled loop to copy 8 elements at a time
                            | # Reordered instructions to avoid bubbling/stalling (ex. put at least one
                            | # instruction between mrmovq and next instruction involving that register)
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len < 8?
0x03e: 72b601000000000000   | 	jl Rem1			# if so, goto Rem1
                            | 
0x047: 50870000000000000000 | Copy:	mrmovq (%rdi), %r8	# copy 8 elements to registers
0x051: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x05b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x065: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x06f: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x079: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x083: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x08d: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
                            | 
0x097: 6288                 | Copy1:	andq %r8, %r8		# element > 0?
0x099: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# copy element 1 to destination
0x0a3: 71b600000000000000   | 	jle Copy2		
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax		# if so, count++
                            | 
0x0b6: 6299                 | Copy2:	andq %r9, %r9		# repeat for elements 2-8
0x0b8: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	
0x0c2: 71d500000000000000   | 	jle Copy3
0x0cb: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
0x0d5: 62aa                 | Copy3:	andq %r10, %r10
0x0d7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	
0x0e1: 71f400000000000000   | 	jle Copy4
0x0ea: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0f4: 62bb                 | Copy4:	andq %r11, %r11
0x0f6: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	
0x100: 711301000000000000   | 	jle Copy5
0x109: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x113: 62cc                 | Copy5:	andq %r12, %r12
0x115: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	
0x11f: 713201000000000000   | 	jle Copy6
0x128: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x132: 62dd                 | Copy6:	andq %r13, %r13
0x134: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	
0x13e: 715101000000000000   | 	jle Copy7
0x147: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x151: 62ee                 | Copy7:	andq %r14, %r14
0x153: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	
0x15d: 717001000000000000   | 	jle Copy8
0x166: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x170: 6233                 | Copy8:	andq %rbx, %rbx
0x172: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)	
0x17c: 718f01000000000000   | 	jle Npos
0x185: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x18f: c0f74000000000000000 | Npos:	iaddq $64, %rdi		# 0x191 src+=8
0x199: c0f64000000000000000 | 	iaddq $64, %rsi		# 0x19b dst+=8
0x1a3: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# 0x1a5 len-=8
0x1ad: 754700000000000000   | 	jge Copy		# 0x1b9 if len >= 8, goto Copy8 (continue loop):
                            | 	
                            | 
0x1b6: c0f20800000000000000 | Rem1:	iaddq $8, %rdx		# store len in %rdx (previously stored len-8), set condition codes
0x1c0: 50870000000000000000 | 	mrmovq (%rdi), %r8	# move remainder element 1 to register
0x1ca: 715a03000000000000   | 	jle Done		# if len <=0, goto Done
0x1d3: 6288                 | 	andq %r8, %r8		# element > 0?
0x1d5: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# copy element to memory
0x1df: 71f201000000000000   | 	jle Rem2		 
0x1e8: c0f00100000000000000 | 	iaddq $1, %rax		# if so, count++
                            | 
0x1f2: c0f2ffffffffffffffff | Rem2:	iaddq $-1, %rdx	# 0x1c2 # decrement len, set condition codes
0x1fc: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# repeat for remaining elements
0x206: 715a03000000000000   | 	jle Done
0x20f: 6299                 | 	andq %r9, %r9	
0x211: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x21b: 712e02000000000000   | 	jle Rem3
0x224: c0f00100000000000000 | 	iaddq $1, %rax	
                            | 
0x22e: c0f2ffffffffffffffff | Rem3:	iaddq $-1, %rdx		
0x238: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x242: 715a03000000000000   | 	jle Done
0x24b: 62aa                 | 	andq %r10, %r10
0x24d: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x257: 716a02000000000000   | 	jle Rem4
0x260: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x26a: c0f2ffffffffffffffff | Rem4:	iaddq $-1, %rdx		
0x274: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x27e: 715a03000000000000   | 	jle Done
0x287: 62bb                 | 	andq %r11, %r11
0x289: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x293: 71a602000000000000   | 	jle Rem5
0x29c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2a6: c0f2ffffffffffffffff | Rem5:	iaddq $-1, %rdx		
0x2b0: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x2ba: 715a03000000000000   | 	jle Done
0x2c3: 62cc                 | 	andq %r12, %r12
0x2c5: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x2cf: 71e202000000000000   | 	jle Rem6
0x2d8: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2e2: c0f2ffffffffffffffff | Rem6:	iaddq $-1, %rdx		
0x2ec: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x2f6: 715a03000000000000   | 	jle Done
0x2ff: 62dd                 | 	andq %r13, %r13
0x301: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x30b: 711e03000000000000   | 	jle Rem7
0x314: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x31e: c0f2ffffffffffffffff | Rem7:	iaddq $-1, %rdx		
0x328: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x332: 715a03000000000000   | 	jle Done
0x33b: 62ee                 | 	andq %r14, %r14
0x33d: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x347: 715a03000000000000   | 	jle Done
0x350: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x35a:                      | Done:
0x35a: 90                   | 	ret			
                            | ##################################################################
                            | 
                            | # Keep the following label at the end of your function
0x35b:                      | End:
                            | #/* $end ncopy-ys */
0x35b:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x360:                      | 	.align 8
0x360:                      | src:
0x360: 0100000000000000     | 	.quad 1
0x368: 0200000000000000     | 	.quad 2
0x370: fdffffffffffffff     | 	.quad -3
0x378: fcffffffffffffff     | 	.quad -4
0x380: fbffffffffffffff     | 	.quad -5
0x388: 0600000000000000     | 	.quad 6
0x390: 0700000000000000     | 	.quad 7
0x398: f8ffffffffffffff     | 	.quad -8
0x3a0: 0900000000000000     | 	.quad 9
0x3a8: f6ffffffffffffff     | 	.quad -10
0x3b0: f5ffffffffffffff     | 	.quad -11
0x3b8: 0c00000000000000     | 	.quad 12
0x3c0: f3ffffffffffffff     | 	.quad -13
0x3c8: f2ffffffffffffff     | 	.quad -14
0x3d0: 0f00000000000000     | 	.quad 15
0x3d8: f0ffffffffffffff     | 	.quad -16
0x3e0: efffffffffffffff     | 	.quad -17
0x3e8: eeffffffffffffff     | 	.quad -18
0x3f0: edffffffffffffff     | 	.quad -19
0x3f8: 1400000000000000     | 	.quad 20
0x400: ebffffffffffffff     | 	.quad -21
0x408: 1600000000000000     | 	.quad 22
0x410: 1700000000000000     | 	.quad 23
0x418: e8ffffffffffffff     | 	.quad -24
0x420: 1900000000000000     | 	.quad 25
0x428: e6ffffffffffffff     | 	.quad -26
0x430: 1b00000000000000     | 	.quad 27
0x438: 1c00000000000000     | 	.quad 28
0x440: 1d00000000000000     | 	.quad 29
0x448: 1e00000000000000     | 	.quad 30
0x450: 1f00000000000000     | 	.quad 31
0x458: e0ffffffffffffff     | 	.quad -32
0x460: dfffffffffffffff     | 	.quad -33
0x468: 2200000000000000     | 	.quad 34
0x470: 2300000000000000     | 	.quad 35
0x478: 2400000000000000     | 	.quad 36
0x480: dbffffffffffffff     | 	.quad -37
0x488: daffffffffffffff     | 	.quad -38
0x490: 2700000000000000     | 	.quad 39
0x498: 2800000000000000     | 	.quad 40
0x4a0: d7ffffffffffffff     | 	.quad -41
0x4a8: 2a00000000000000     | 	.quad 42
0x4b0: d5ffffffffffffff     | 	.quad -43
0x4b8: 2c00000000000000     | 	.quad 44
0x4c0: d3ffffffffffffff     | 	.quad -45
0x4c8: d2ffffffffffffff     | 	.quad -46
0x4d0: 2f00000000000000     | 	.quad 47
0x4d8: 3000000000000000     | 	.quad 48
0x4e0: 3100000000000000     | 	.quad 49
0x4e8: ceffffffffffffff     | 	.quad -50
0x4f0: 3300000000000000     | 	.quad 51
0x4f8: ccffffffffffffff     | 	.quad -52
0x500: 3500000000000000     | 	.quad 53
0x508: 3600000000000000     | 	.quad 54
0x510: 3700000000000000     | 	.quad 55
0x518: 3800000000000000     | 	.quad 56
0x520: c7ffffffffffffff     | 	.quad -57
0x528: c6ffffffffffffff     | 	.quad -58
0x530: c5ffffffffffffff     | 	.quad -59
0x538: c4ffffffffffffff     | 	.quad -60
0x540: c3ffffffffffffff     | 	.quad -61
0x548: c2ffffffffffffff     | 	.quad -62
0x550: c1ffffffffffffff     | 	.quad -63
0x558: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
